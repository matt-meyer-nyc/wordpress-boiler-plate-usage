{"version":3,"sources":["@wordpress/blocks/src/api/raw-handling/html-formatting-remover.js"],"names":["isFormattingSpace","character","node","nodeType","TEXT_NODE","parentElement","closest","newData","data","replace","previousSibling","nodeName","textContent","slice","length","nextSibling","parentNode","removeChild"],"mappings":";;;;;;;AAGA;;AAHA;;;AAKA,SAASA,iBAAT,CAA4BC,SAA5B,EAAwC;AACvC,SACCA,SAAS,KAAK,GAAd,IACAA,SAAS,KAAK,IADd,IAEAA,SAAS,KAAK,IAFd,IAGAA,SAAS,KAAK,IAJf;AAMA;AAED;;;;;;;;;;AAQe,kBAAUC,IAAV,EAAiB;AAC/B,MAAKA,IAAI,CAACC,QAAL,KAAkBD,IAAI,CAACE,SAA5B,EAAwC;AACvC;AACA,GAH8B,CAK/B;;;AACA,MAAKF,IAAI,CAACG,aAAL,CAAmBC,OAAnB,CAA4B,KAA5B,CAAL,EAA2C;AAC1C;AACA,GAR8B,CAU/B;;;AACA,MAAIC,OAAO,GAAGL,IAAI,CAACM,IAAL,CAAUC,OAAV,CAAmB,aAAnB,EAAkC,GAAlC,CAAd,CAX+B,CAa/B;AACA;AACA;;AACA,MAAKF,OAAO,CAAE,CAAF,CAAP,KAAiB,GAAtB,EAA4B;AAC3B,QAAMG,eAAe,GAAG,uBAAYR,IAAZ,EAAkB,UAAlB,CAAxB;;AAEA,QACC,CAAEQ,eAAF,IACAA,eAAe,CAACC,QAAhB,KAA6B,IAD7B,IAEAD,eAAe,CAACE,WAAhB,CAA4BC,KAA5B,CAAmC,CAAC,CAApC,MAA4C,GAH7C,EAIE;AACDN,MAAAA,OAAO,GAAGA,OAAO,CAACM,KAAR,CAAe,CAAf,CAAV;AACA;AACD,GA1B8B,CA4B/B;AACA;AACA;;;AACA,MAAKN,OAAO,CAAEA,OAAO,CAACO,MAAR,GAAiB,CAAnB,CAAP,KAAkC,GAAvC,EAA6C;AAC5C,QAAMC,WAAW,GAAG,uBAAYb,IAAZ,EAAkB,MAAlB,CAApB;;AAEA,QACC,CAAEa,WAAF,IACAA,WAAW,CAACJ,QAAZ,KAAyB,IADzB,IAEEI,WAAW,CAACZ,QAAZ,KAAyBY,WAAW,CAACX,SAArC,IACDJ,iBAAiB,CAAEe,WAAW,CAACH,WAAZ,CAAyB,CAAzB,CAAF,CAJnB,EAKE;AACDL,MAAAA,OAAO,GAAGA,OAAO,CAACM,KAAR,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAV;AACA;AACD,GA1C8B,CA4C/B;AACA;;;AACA,MAAK,CAAEN,OAAP,EAAiB;AAChBL,IAAAA,IAAI,CAACc,UAAL,CAAgBC,WAAhB,CAA6Bf,IAA7B;AACA,GAFD,MAEO;AACNA,IAAAA,IAAI,CAACM,IAAL,GAAYD,OAAZ;AACA;AACD","sourcesContent":["/**\n * Internal dependencies\n */\nimport { getSibling } from './utils';\n\nfunction isFormattingSpace( character ) {\n\treturn (\n\t\tcharacter === ' ' ||\n\t\tcharacter === '\\r' ||\n\t\tcharacter === '\\n' ||\n\t\tcharacter === '\\t'\n\t);\n}\n\n/**\n * Removes spacing that formats HTML.\n *\n * @see https://www.w3.org/TR/css-text-3/#white-space-processing\n *\n * @param {Node} node The node to be processed.\n * @return {void}\n */\nexport default function( node ) {\n\tif ( node.nodeType !== node.TEXT_NODE ) {\n\t\treturn;\n\t}\n\n\t// Ignore pre content.\n\tif ( node.parentElement.closest( 'pre' ) ) {\n\t\treturn;\n\t}\n\n\t// First, replace any sequence of HTML formatting space with a single space.\n\tlet newData = node.data.replace( /[ \\r\\n\\t]+/g, ' ' );\n\n\t// Remove the leading space if the text element is at the start of a block,\n\t// is preceded by a line break element, or has a space in the previous\n\t// node.\n\tif ( newData[ 0 ] === ' ' ) {\n\t\tconst previousSibling = getSibling( node, 'previous' );\n\n\t\tif (\n\t\t\t! previousSibling ||\n\t\t\tpreviousSibling.nodeName === 'BR' ||\n\t\t\tpreviousSibling.textContent.slice( -1 ) === ' '\n\t\t) {\n\t\t\tnewData = newData.slice( 1 );\n\t\t}\n\t}\n\n\t// Remove the trailing space if the text element is at the end of a block,\n\t// is succeded by a line break element, or has a space in the next text\n\t// node.\n\tif ( newData[ newData.length - 1 ] === ' ' ) {\n\t\tconst nextSibling = getSibling( node, 'next' );\n\n\t\tif (\n\t\t\t! nextSibling ||\n\t\t\tnextSibling.nodeName === 'BR' ||\n\t\t\t( nextSibling.nodeType === nextSibling.TEXT_NODE &&\n\t\t\t\tisFormattingSpace( nextSibling.textContent[ 0 ] ) )\n\t\t) {\n\t\t\tnewData = newData.slice( 0, -1 );\n\t\t}\n\t}\n\n\t// If there's no data left, remove the node, so `previousSibling` stays\n\t// accurate. Otherwise, update the node data.\n\tif ( ! newData ) {\n\t\tnode.parentNode.removeChild( node );\n\t} else {\n\t\tnode.data = newData;\n\t}\n}\n"]}